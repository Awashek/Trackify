@page "/transaction"

<h3>Transaction Table</h3>

<!-- Search Bar and Date Filter -->
<div class="d-flex flex-wrap justify-content-between mb-5 p-4 bg-white rounded shadow-lg border border-light">
    <!-- Search Bar -->
    <div class="input-group w-full sm:w-1/3 md:w-1/4 mb-3 sm:mb-0">
        <input type="text" class="form-control rounded-pill border-0 shadow-sm p-3" @bind="searchQuery" placeholder="Search transactions by title..." />
        <button class="btn btn-primary rounded-pill ms-2 shadow-sm px-4 py-2" @onclick="SearchTransactions">
            <strong>Search</strong>
        </button>
    </div>

    <!-- Tags Filter -->
    <div class="input-group w-full sm:w-1/4 md:w-1/5 mb-3 sm:mb-0">
        <select class="form-select rounded-pill border-0 shadow-sm p-3" @bind="selectedTag">
            <option value="">Select Tags</option>
            <option value="Fuel">Fuel</option>
            <option value="Bike">Bike</option>
            <option value="Car">Car</option>
        </select>
    </div>

    <!-- Type Filter -->
    <div class="input-group w-full sm:w-1/4 md:w-1/5 mb-3 sm:mb-0">
        <select class="form-select rounded-pill border-0 shadow-sm p-3" @bind="selectedType">
            <option value="">Select Type</option>
            <option value="Income">Income</option>
            <option value="Expense">Expense</option>
            <option value="Debt">Debt</option>
        </select>
    </div>

    <!-- Date Filter Toggle -->
    <div class="d-flex align-items-center mt-3 mt-sm-0">
        <button class="btn btn-outline-secondary rounded-pill px-4 py-2 shadow-sm" @onclick="ToggleDateFilter">
            <strong>Filter by Date</strong>
        </button>
    </div>
</div>



<!-- Date Filter Inputs (Show when toggled) -->
@if (showDateFilter)
{
<div class="d-flex justify-content-between mb-4">
    <div class="input-group w-25">
        <label for="fromDate" class="mr-2">From:</label>
        <input type="date" id="fromDate" @bind="fromDate" class="form-control" />
    </div>
    <div class="input-group w-25">
        <label for="toDate" class="mr-2">To:</label>
        <input type="date" id="toDate" @bind="toDate" class="form-control" />
    </div>
    <button class="btn btn-primary" @onclick="ApplyFilters">Apply Date Filter</button>
</div>
}

<!-- Transaction Table -->
<div class="transaction-list">
    <table class="table table-striped">
        <!-- Table Header -->
        <thead class="thead-dark">
        <tr>
            <th scope="col" class="w-25">Title</th>
            <th scope="col" class="w-15">Amount</th>
            <th scope="col" class="w-15">Type</th>
            <th scope="col" class="w-25">Description</th>
            <th scope="col" class="w-15">Date</th>
            <th scope="col" class="w-15">Tags</th>
            <th>
            </th>
        </tr>
        </thead>

        <!-- Table Body -->
        <tbody>
        @if (filteredTransactions == null || filteredTransactions.Count == 0)
        {
            <tr>
                <td colspan="6" class="text-center">No transactions available.</td>
            </tr>
        }
        else
        {
            @foreach (var transaction in filteredTransactions)
            {
                <tr>
                    <td>@transaction.Title</td>
                    <td>@transaction.Amount.ToString("C")</td>
                    <td>@transaction.Type</td>
                    <td>@transaction.Description</td>
                    <td>@transaction.Date.ToString("yyyy-MM-dd")</td>
                    <td>@string.Join(", ", transaction.Tags)</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => ShowUpdateTransactionModal(transaction.Id)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteTransaction(transaction.Id)">Delete</button>

                    </td>
                </tr>
            
            }
        }
        </tbody>
    </table>
</div>

<div class="d-flex justify-content-end mt-3">
    <button class="btn btn-success" @onclick="OpenModal">Add Transaction</button>
</div>

<style>
    /* Custom green button */
    .btn-custom-green {
        background-color: #28a745; /* Green color */
        border-color: #28a745;
    }

    .btn-custom-green:hover {
        background-color: #218838; /* Darker green on hover */
        border-color: #1e7e34;
    }

</style>


<!-- Add/Edit Modal -->
@if (showModal)
{
    <div class="modal show d-block">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@modalTitle</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="title" class="form-label">Title</label>
                        <input type="text" id="title" class="form-control" @bind="newTransaction.Title">
                    </div>
                    <div class="mb-3">
                        <label for="amount" class="form-label">Amount</label>
                        <input type="number" id="amount" class="form-control" @bind="newTransaction.Amount">
                    </div>
                    <div class="mb-3">
                        <label for="type" class="form-label">Type</label>
                        <select id="type" class="form-select" @bind="newTransaction.Type">
                            <option value="">Select Type</option>
                            <option value="Income">Income</option>
                            <option value="Expense">Expense</option>
                            <option value="Debt">Debt</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="description" class="form-label">Description</label>
                        <input type="text" id="description" class="form-control" @bind="newTransaction.Description">
                    </div>
                    <div class="mb-3">
                        <label>Source</label>
                        <input type="text" class="form-control" @bind="newDebt.Source" />
                    </div>
                    <div class="mb-3">
                        <label>Date</label>
                        <input type="date" class="form-control" @bind="newTransaction.Date" />
                    </div>
                    <div class="mb-3">
                        <label for="tags" class="form-label">Tags</label>
                        <select id="tags" class="form-select" @bind="newTransaction.Tags">
                            <option value="">Select Tags</option>
                            <option value="Fuel">Fuel</option>
                            <option value="Bike">Bike</option>
                            <option value="Car">Car</option>
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="AddTransaction">Save</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Updating -->
@if (showUpdateTransactionModal)
{
<div class="modal fade show d-block" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Update Transaction</h5>
                <button type="button" class="btn-close" @onclick="() => showUpdateTransactionModal = false"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label>Title</label>
                    <input type="text" class="form-control" @bind="selectedTransaction.Title" />
                </div>

                <div class="mb-3">
                    <label>Amount</label>
                    <input type="number" class="form-control" @bind="selectedTransaction.Amount" />
                </div>

                <div class="mb-3">
                    <label>Description</label>
                    <input type="text" class="form-control" @bind="selectedTransaction.Description" />
                </div>
                

                <div class="mb-3">
                    <label>Type</label>
                    <select class="form-control" @bind="selectedTransaction.Type">
                        <option value="Income">Income</option>
                        <option value="Expense">Expense</option>
                        <option value="Expense">Debt</option>
                    </select>
                </div>

                <div class="mb-3">
                    <label>Tags</label>
                    <input type="text" class="form-control" @bind="selectedTransaction.Tags" placeholder="Comma-separated tags" />
                </div>

                <div class="mb-3">
                    <label>Date</label>
                    <input type="date" class="form-control" @bind="selectedTransaction.Date" />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="() => showUpdateTransactionModal = false">Close</button>
                <button type="button" class="btn btn-primary" @onclick="UpdateTransaction">Save Changes</button>
            </div>
        </div>
    </div>
</div>
<div class="modal-backdrop fade show"></div>
}



@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="modal fade show" tabindex="-1" style="display: block;" aria-labelledby="successModalLabel" aria-hidden="false">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="successModalLabel">Transaction Successful</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseSuccessModal"></button>
                </div>
                <div class="modal-body">
                    <p>@successMessage</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseSuccessModal">Close</button>
                </div>
            </div>
        </div>
    </div>
}


<!-- Error Modal -->
@if (!string.IsNullOrEmpty(errorMessage))
{
<div class="modal fade show d-block" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Error</h5>
                <button type="button" class="btn-close" @onclick="CloseErrorModal"></button>
            </div>
            <div class="modal-body">
                <p>@errorMessage</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseErrorModal">Close</button>
            </div>
        </div>
    </div>
</div>
<div class="modal-backdrop fade show"></div>
}




@code {
    private List<Models.Transaction> transactions;
    private List<Models.Transaction> filteredTransactions;
    private string searchQuery = string.Empty;
    private bool showDateFilter = false;
    private DateTime? fromDate = null;
    private DateTime? toDate = null;
    private string selectedTag = string.Empty;
    private string selectedType = string.Empty;
    
    private Models.Transaction selectedTransaction = new Models.Transaction();
    private bool showUpdateTransactionModal = false;

    private Models.Debt newDebt = new Models.Debt();
    
    private void ShowUpdateTransactionModal(int transactionId)
    {
        selectedTransaction = transactions.FirstOrDefault(t => t.Id == transactionId);
        if (selectedTransaction != null)
        {
            showUpdateTransactionModal = true;
        }
    }
    private async Task UpdateTransaction()
    {
        if (selectedTransaction != null)
        {
            // Call the service to update the transaction in the backend
            await TransactionService.UpdateTransaction(selectedTransaction);

            // Update the local list to reflect changes
            var transaction = transactions.FirstOrDefault(t => t.Id == selectedTransaction.Id);
            if (transaction != null)
            {
                transaction.Title = selectedTransaction.Title;
                transaction.Amount = selectedTransaction.Amount;
                transaction.Description = selectedTransaction.Description;
                transaction.Type = selectedTransaction.Type;
                transaction.Tags = selectedTransaction.Tags;
                transaction.Date = selectedTransaction.Date;
            }

            // Close the modal
            showUpdateTransactionModal = false;
            StateHasChanged();
        }
    }
    
    private void CloseSuccessModal()
    {
        successMessage = null;
    }

    private void CloseErrorModal()
    {
        errorMessage = null;
    }
    
  
   
    private async Task AddTransaction()
    {
        try
        {
// Validate the transaction fields
            if (string.IsNullOrWhiteSpace(newTransaction.Description) || newTransaction.Description.Any(char.IsDigit))
            {
                throw new Exception("Description cannot be empty or contain numbers.");
            }

            if (newTransaction.Amount <= 0)
            {
                throw new Exception("Amount must be greater than zero.");
            }

            if (string.IsNullOrWhiteSpace(newTransaction.Type))
            {
                throw new Exception("Transaction type is required.");
            }

// Call the service to add the transaction
            await TransactionService.AddTransaction(new Models.Transaction
            {
                Description = newTransaction.Description,
                Date = newTransaction.Date == default ? DateTime.Now : newTransaction.Date,
                Amount = newTransaction.Amount,
                Type = newTransaction.Type,
                Tags = newTransaction.Tags,
                Title = newTransaction.Title
            });

// If the transaction type is "Debt", add it to the debts as well
            if (newTransaction.Type == "Debt")
            {
                await DebtService.AddDebt(new Models.Debt
                {
                    Title = newTransaction.Title,
                    Status = "Pending",
                    //made changes here
                    Amount = newTransaction.Amount,
                    DueDate = newDebt.DueDate,
                    ClearedDate = null,
                    Source = newDebt.Source
                });
            }
            
// Show success message and reset form
            successMessage = "Your transaction has been successfully added.";
            showSuccessDialog = true;
            errorMessage = null;
            newTransaction = new Models.Transaction(); // Reset the form data
            CloseModal(); // Close the modal
        }
        catch (Exception ex)
        {
// Log the error and display the error message
            Console.WriteLine($"Error adding transaction: {ex.Message}");
            errorMessage = ex.Message;
            successMessage = null;
        }
    }






    

    // This method is called when the component is initialized
    protected override async Task OnInitializedAsync()
    {
        transactions = await TransactionService.GetAllTransactions(); // Load transactions from the service
        filteredTransactions = transactions;
    }

    // Toggles the visibility of the date filter
    private void ToggleDateFilter()
    {
        showDateFilter = !showDateFilter;
    }

    // Applies both the search filter and the date filter
    private void ApplyFilters()
    {
        var trimmedSearchQuery = searchQuery?.Trim();

        // Filter transactions based on Title, Type, Tags, and Date
        filteredTransactions = transactions
            .Where(t =>
                // Search filter by Title
                string.IsNullOrEmpty(trimmedSearchQuery) ||
                t.Title.Contains(trimmedSearchQuery, StringComparison.OrdinalIgnoreCase)
            )
            .Where(t =>
                // Filter by Tags
                string.IsNullOrEmpty(selectedTag) || t.Tags.Contains(selectedTag)
            )
            .Where(t =>
                // Filter by Type
                string.IsNullOrEmpty(selectedType) || t.Type == selectedType
            )
            .Where(t =>
                // Date range filter
                (!fromDate.HasValue || t.Date >= fromDate.Value) &&
                (!toDate.HasValue || t.Date <= toDate.Value)
            )
            .OrderByDescending(t => t.Date) // Sort by Date
            .ToList();
    }



    // Search by title when search icon is clicked
    private void SearchTransactions()
    {
        ApplyFilters(); // Apply filters after clicking the search icon
    }
    
    private string modalTitle = "Add Transaction";
    private string searchTerm;
    private string errorMessage;
    private string successMessage;

    private bool showModal = false;

    private Models.Transaction newTransaction = new Models.Transaction();

    private void OpenModal()
    {
        modalTitle = "Add Transaction";
        newTransaction = new Models.Transaction() { Date = DateTime.Now };
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        errorMessage = null;
        successMessage = null;
    }

    private bool showSuccessDialog = false;
    
    private async Task DeleteTransaction(int transactionId)
    {
        try
        {
            // Call the service to delete the transaction from the file
            await TransactionService.DeleteTransaction(transactionId);

            // Find the transaction in the local list to remove it
            var transaction = transactions.FirstOrDefault(t => t.Id == transactionId);
        
            // If found, remove from the local list and show success message
            if (transaction != null)
            {
                transactions.Remove(transaction);

                // Reapply filters to refresh the table if needed
                ApplyFilters();

                // Set success message and show the dialog
                successMessage = "Transaction deleted successfully.";
                showSuccessDialog = true; // Show the dialog
            }
            else
            {
                // If the transaction wasn't found in the local list, show an error message
                successMessage = "Transaction deleted successfully.";
            }
        }
        catch (KeyNotFoundException)
        {
            // Handle service-specific error if transaction not found
            errorMessage = "Transaction not found in the database.";
        }
        catch (Exception ex)
        {
            // Handle general errors
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }
    
}
