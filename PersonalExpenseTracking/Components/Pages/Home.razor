
@page "/home"
@using PersonalExpenseTracking.Services.Interface
@inject NavigationManager Nav
@using PersonalExpenseTracking.Models
@using MudBlazor
<button class="btn btn-lg btn-secondary" @onclick="ShowLogoutConfirmation" style="position: fixed; top: 20px; right: 20px; z-index: 1000;">
    Logout
</button>

<style>
    .dashboard-card {
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        padding: 20px;
        margin-bottom: 20px;
    }

    .dashboard-header {
        display: flex;
        justify-content: space-between;
    }

    .chart-container {
        height: 300px;
    }

    .transaction-list {
        margin-top: 20px;
    }

    .transaction-item {
        display: flex;
        justify-content: space-between;
        padding: 20px 0;
        border-bottom: 1px solid #eee;
    }
   

    .transaction-item span {
        display: inline-block; /* Ensures proper alignment */
        width: 100%; /* Make spans take full width */
        text-align: center; /* Center text */
    }
    .transaction-list {
        width: 100%;
    }

    .transaction-header,
    .transaction-item {
        display: grid;
        grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr;
        padding: 8px 0;
        border-bottom: 1px solid #dee2e6;
    }

    .transaction-header {
        font-weight: bold;
    }

    .custom-blue {
        background-color: #18c9cc; /* Your specific blue color */
    }

    .transaction-header span,
    .transaction-item span {
        padding: 0 10px;
    }

</style>
<div class="container mt-4">
    <h3 style="color:green">welcome @globalstate.CurrentUser.Username</h3>

    <div class="row">
        <div class="col-md-4">
            <div class="dashboard-card bg-primary text-white text-center">
            
                <h5>Total Inflows</h5>
                <h2>@globalstate.CurrentUser.Preferred_Currency @totalIncome</h2>
            </div>
        </div>
        <div class="col-md-4">
            <div class="dashboard-card custom-blue text-white text-center">
                <h5>Total Outflows</h5>
                <h2>@globalstate.CurrentUser.Preferred_Currency @totalExpense</h2>
            </div>
        </div>
        <div class="col-md-4">
            <div class="dashboard-card bg-warning text-white text-center">
                <h5>Total Debt</h5>
                <h2>@globalstate.CurrentUser.Preferred_Currency @totalDebt</h2>
            </div>
        </div>

        <div class="col-md-4">
            <div class="dashboard-card bg-success text-white text-center">
                <h5>Cleared Debt</h5>
                <h2>@globalstate.CurrentUser.Preferred_Currency @clearedDebt</h2>
            </div>
        </div>
        <div class="col-md-4">
            <div class="dashboard-card bg-secondary text-white text-center">
                <h5>Remaining Debt</h5>
                <h2>@globalstate.CurrentUser.Preferred_Currency @remainingDebt</h2>
            </div>
        </div>
        <div class="col-md-4">
            <div class="dashboard-card bg-info text-white text-center">
                <h5>Total Balance</h5>
                <h2>@globalstate.CurrentUser.Preferred_Currency @totalBalance</h2>
            </div>
        </div>
    </div>



    
    <div class="row">
        <div class="col-md-6">
            <div class="dashboard-card">
                <h5>Financial Overview</h5>
                <div class="chart-container">
                    <MudPaper Class="pa-4">
                        <MudChart
                            ChartType="ChartType.Pie"
                            InputData="@data"
                            @bind-SelectedIndex="Index"
                            InputLabels="@labels"
                            InputColors="new string[] { '#FFFF00', '#1C9FDD', '#90EE90' }"
                            Width="300px"
                            Height="300px" />

                    </MudPaper>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="dashboard-card">
                <h5>Top Transactions</h5>

                <!-- Dropdown for filtering transactions -->
                <div class="mb-3">
                    <select class="form-select" @bind="selectedFilter">
                        <option value="All">All Transactions</option>
                        <option value="Top5">Top 5 Transactions</option>
                        <option value="Last5">Last 5 Transactions</option>
                    </select>
                </div>
                <!-- Date Range Filter -->
                <div class="mb-4">
                    <div class="row">
                        <!-- From Date Picker -->
                        <div class="col-md-5 mb-3">
                            <label for="fromDate" class="font-weight-bold mb-2">From</label>
                            <input type="date" id="fromDate" class="form-control" @bind="fromDate" />
                        </div>

                        <!-- To Date Picker -->
                        <div class="col-md-5 mb-3">
                            <label for="toDate" class="font-weight-bold mb-2">To</label>
                            <input type="date" id="toDate" class="form-control" @bind="toDate" />
                        </div>
                    </div>
                </div>



                <div class="transaction-list">
                    <table class="table">
                        <thead>
                        <tr>
                            <th class="text-start">Title</th>
                            <th class="text-start">Date</th>
                            <th class="text-start">Amount</th>
                            <th class="text-start">Description</th>
                            <th class="text-start">Tag</th>
                            <th class="text-start">Type</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var transaction in filteredTransactions)
                        {
                        <tr>
                            <td>@transaction.Title</td>
                            <td>@transaction.Date.ToString("yyyy-MM-dd")</td>
                            <td>@transaction.Amount.ToString()</td>
                            <td>@transaction.Description</td>
                            <td>@transaction.Tags</td>
                            <td class="@(transaction.Type == "Income" ? "text-success" : "text-danger")">
                                @transaction.Type
                            </td>
                        </tr>
                        }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Debt List -->

    <div class="dashboard-card">
        <h5>Debt List</h5>

        <div class="d-flex justify-content-end mb-3">
            <button class="btn btn-lg btn-primary" @onclick="ShowAddDebtModal">
                Add Debt
            </button>
        </div>

        <div class="transaction-list">
            <!-- Header Row -->
            <div class="row mb-2 border-bottom">
                <div class="col">Title</div>
                <div class="col">Amount</div>
                <div class="col">Source</div>
                <div class="col">Status</div>
                <div class="col">DueDate</div>
                <div class="col">Actions</div>
            </div>

            <!-- Transaction Rows -->
            @foreach (var debt in debts)
            {
            <div class="row mb-2 pb-2 border-bottom">
                <div class="col">@debt.Title</div>
                <div class="col">@debt.Amount.ToString("0.00")</div>
                <div class="col">@debt.Source</div>
                <div class="col">
                    <span class="@(debt.Status == "Completed" ? "text-success" : "text-danger")">@debt.Status</span>
                </div>
                <div class="col">@debt.DueDate.ToString("yyyy-MM-dd")</div>
                <div class="col">
                    <button class="btn btn-sm btn-warning" @onclick="() => ShowUpdateDebtModal(debt.Id)">Update</button>
                    <button class="btn btn-sm btn-danger" @onclick="() => ClearDebt(debt.Id)">Clear</button>
                </div>
            </div>
            }
        </div>
    </div>



@*Modal for adding Debts *@

@if (showAddDebtModal)
{
<div class="modal fade show d-block" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Debt</h5>
                <button type="button" class="btn-close" @onclick="CloseAddDebtModal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label>Title</label>
                    <input type="text" class="form-control" @bind="newDebt.Title" />
                </div>

                <div class="mb-3">
                    <label>Amount</label>
                    <input type="number" class="form-control" @bind="newDebt.Amount" />
                </div>

                <div class="mb-3">
                    <label>Source</label>
                    <input type="text" class="form-control" @bind="newDebt.Source" />
                </div>

                <div class="mb-3">
                    <label>Status</label>
                    <select class="form-control" @bind="newDebt.Status">
                        <option value="Pending">Pending</option>
                        
                    </select>
                </div>

                <div class="mb-3">
                    <label>Due Date</label>
                    <input type="date" class="form-control" @bind="newDebt.DueDate" />
                </div>

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                <div class="alert alert-danger">
                    @errorMessage
                </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseAddDebtModal">Close</button>
                <button type="button" class="btn btn-primary" @onclick="AddDebt">Add Debt</button>
            </div>
        </div>
    </div>
</div>
<div class="modal-backdrop fade show"></div>
}


@if (showUpdateDebtModal)
{
<div class="modal fade show d-block" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Update Debt</h5>
                <button type="button" class="btn-close" @onclick="() => showUpdateDebtModal = false"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label>Title</label>
                    <input type="text" class="form-control" @bind="selectedDebt.Title" />
                </div>

                <div class="mb-3">
                    <label>Amount</label>
                    <input type="number" class="form-control" @bind="selectedDebt.Amount" />
                </div>

                <div class="mb-3">
                    <label>Source</label>
                    <input type="text" class="form-control" @bind="selectedDebt.Source" />
                </div>

                <div class="mb-3">
                    <label>Status</label>
                    <select class="form-control" @bind="selectedDebt.Status">
                        <option value="Pending">Pending</option>
                        <option value="Completed">Completed</option>
                    </select>
                </div>

                <div class="mb-3">
                    <label>Due Date</label>
                    <input type="date" class="form-control" @bind="selectedDebt.DueDate" />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="() => showUpdateDebtModal = false">Close</button>
                <button type="button" class="btn btn-primary" @onclick="UpdateDebt">Save Changes</button>
            </div>
        </div>
    </div>
</div>
<div class="modal-backdrop fade show"></div>
}



@if (IslogOut)
{
<div class="modal" tabindex="-1" role="dialog" style="display: block; background-color: rgba(0, 0, 0, 0.5); position: fixed; top: 0; left: 0; width: 100%; height: 100%; overflow: auto;">
    <div class="modal-dialog" role="document" style="margin-top: 20%; margin-left: auto; margin-right: auto; max-width: 400px;">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Logout</h5>
                <button type="button" class="close" @onclick="HideLogoutConfirmation">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to logout?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="HideLogoutConfirmation">No</button>
                <button type="button" class="btn btn-primary" @onclick="Logout">Yes</button>
            </div>
        </div>
    </div>
</div>
}


@if (!string.IsNullOrEmpty(successMessage))
{
<div class="modal fade show" tabindex="-1" style="display: block;" aria-labelledby="successModalLabel" aria-hidden="false">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="successModalLabel">Transaction Successful</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseSuccessModal"></button>
            </div>
            <div class="modal-body">
                <p>@successMessage</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseSuccessModal">Close</button>
            </div>
        </div>
    </div>
</div>
}

@code {

    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.
    int dataSize = 4;
    private double[] data = new double[] {};
    string[] labels = { "Total Inflow", "Total Outflow","Total Debt" };

   

  
    
    
private decimal totalIncome;
private decimal totalExpense;
private decimal totalDebt;
private decimal clearedDebt;
private decimal remainingDebt;
private decimal totalBalance;
private string errorMessage;
private string successMessage;
private bool showAddDebtModal = false;
private bool showSuccessDialog = false;
private bool showErrorDialog = false;

//Transaction
private List<Models.Transaction> transactions = new List<Models.Transaction>();
private Models.Transaction newTransaction = new Models.Transaction();

private bool showModal = false;
//Debt
private Models.Debt newDebt = new Models.Debt();
private List<Models.Debt> debts = new List<Models.Debt>();
private bool showUpdateDebtModal = false;
private Models.Debt selectedDebt = new Models.Debt();



private List<Models.Debt> clearedDebts = new List<Models.Debt>();



protected override void OnInitialized()
{
CalculateTotals();
filteredTransactions = transactions;
}



private void OpenModal()
{
newTransaction = new Models.Transaction();
newTransaction.Date = DateTime.Now;
showModal = true;
}


private async Task LoadDebts()
{
try
{
// Fetch all debts from the service
debts = await DebtService.GetAllDebts(); // Assuming you have a method to fetch all debts
}
catch (Exception ex)
{
Console.WriteLine($"Error loading debts: {ex.Message}");
// Handle the error as needed, e.g., by showing an error message to the user
errorMessage = "There was an error loading the debts. Please try again later.";
}
}


private async Task LoadTransactions()
{
try
{
// Assuming TransactionService.GetAllTransactions() fetches the data
transactions = await TransactionService.GetAllTransactions();
Console.WriteLine($"Loaded {transactions.Count} transactions.");
}
catch (Exception ex)
{
Console.WriteLine($"Error loading transactions: {ex.Message}");
errorMessage = "There was an error loading the transactions. Please try again later.";
}
}




//Debt
// Show the Add Debt modal
private void ShowAddDebtModal()
    {
        showAddDebtModal = true;
    }

        // Close the Add Debt modal
private void CloseAddDebtModal()
    {
        showAddDebtModal = false;
    }



private void CloseModal()
{
    showModal = false;
}

private void CloseSuccessModal()
{
    successMessage = null;
}

private void CloseErrorModal()
{
    errorMessage = null;
}

private void ShowUpdateDebtModal(int debtId)
{
// Find the debt by ID and set it as the selected debt
    selectedDebt = debts.FirstOrDefault(d => d.Id == debtId);
    if (selectedDebt != null)
    {
        showUpdateDebtModal = true;
    }
}


private async Task AddDebt()
{
    try
    {
        // Validate the input fields
        if (string.IsNullOrEmpty(newDebt.Title) || newDebt.Amount <= 0)
        {
            errorMessage = "Please fill in all the fields correctly.";
        }
        else
        {
            // Process the debt transaction (e.g., create a new debt object)
            var debt = new Models.Debt()
            {
                Title = newDebt.Title,
                Status = "Pending",
                Amount = newDebt.Amount,
                DueDate = newDebt.DueDate,
                ClearedDate = null, // Not cleared initially
                Source = newDebt.Source
            };

            // Call the DebtService to add the debt and persist it to the file
            DebtService.AddDebt(debt);

            // Recalculate the totals
            CalculateTotals();

            // Show success message
            successMessage = "Debt added successfully!";
            showSuccessDialog = true; // Show success dialog

            // Close the modal after debt is added
            showModal = false; // Hide the Add Debt modal

            // Reset the debt form
            newDebt = new Models.Debt(); // Reset the debt form

            // Ensure the UI updates
            StateHasChanged();
        }
    }
    catch (Exception ex)
    {
        errorMessage = ex.Message;
    }
}



private async Task ClearDebt(int debtId)
    {
        try
        {
            var debtToClear = debts.FirstOrDefault(d => d.Id == debtId);
            if (debtToClear != null)
            {
                if (debtToClear.Status == "Completed")
                {
                    successMessage = "Debt is already cleared.";
                    showSuccessDialog = true;
                    StateHasChanged();
                    return;
                }

                debtToClear.Status = "Completed";
                debtToClear.ClearedDate = DateOnly.FromDateTime(DateTime.Now);

                // Update the debts list
                debts.Remove(debtToClear);
                clearedDebts.Add(debtToClear); // Add to cleared debts

                // Adjust totals after clearing the debt
                totalDebt -= debtToClear.Amount;
                remainingDebt -= debtToClear.Amount;
                clearedDebt += debtToClear.Amount;

                // Recalculate totals
                CalculateTotals();

                // Save updated debts to the file using the DebtService
               // await DebtService.SaveDebtsToFile();

                // Show success message and close modal
                successMessage = "Debt cleared successfully!";
                showSuccessDialog = true;
                showModal = false; // Optional: close the modal after success
                StateHasChanged();
            }
            else
            {
                errorMessage = "Debt not found.";
                showErrorDialog = true; // Optionally, show error dialog
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while clearing the debt: {ex.Message}";
            showErrorDialog = true; // Optionally, show error dialog
            StateHasChanged();
        }
    }

    private void CalculateTotals()
    {
        totalDebt = debts.Sum(d => d.Amount);
        clearedDebt = clearedDebts.Sum(d => d.Amount);
        remainingDebt = totalDebt - clearedDebt;

        totalIncome = transactions
            .Where(t => t.Type == "Income")
            .Sum(t => t.Amount);

        totalExpense = transactions
            .Where(t => t.Type == "Expense")
            .Sum(t => t.Amount);

        totalIncome -= clearedDebt;

        totalBalance = totalIncome - totalExpense + remainingDebt;
        
        data = new double[] { (double)totalIncome, (double)totalExpense, (double)totalDebt };
        StateHasChanged();
    }













private async Task UpdateDebt()
{
    if (selectedDebt != null)
    {
// Call the service method to update the debt
        await DebtService.UpdateDebt(selectedDebt);

// Update the local debts list to reflect changes
        var debt = debts.FirstOrDefault(d => d.Id == selectedDebt.Id);
        if (debt != null)
        {
            debt.Source = selectedDebt.Source;
            debt.Title = selectedDebt.Title;
            debt.Amount = selectedDebt.Amount;
            debt.DueDate = selectedDebt.DueDate;
            debt.Status = selectedDebt.Status;
            debt.ClearedDate = selectedDebt.ClearedDate;
        }

// Close the modal after updating
        showUpdateDebtModal = false;
        StateHasChanged();
    }
}


protected override async Task OnInitializedAsync()
{
    try
    {
        await LoadTransactions();
        await LoadDebts();
        CalculateTotals(); // Calculate totals after loading data
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error during initialization: {ex.Message}");
        errorMessage = "There was an issue loading the data. Please try again later.";
    }
}


    private List<Models.Transaction> filteredTransactions = new List<Models.Transaction>();
    private string selectedFilter = "All"; // Default filter is "All"
    
    // Fields for date range filtering
    private DateTime? fromDate = null; // From date
    private DateTime? toDate = null;   // To date
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Call the filter method when the component is first rendered or when the selected filter changes
            FilterTransactions();
        }
        else
        {
            // Re-filter if the filter changes
            FilterTransactions();
        }
    }
    

    private void FilterTransactions()
    {
// Start by using all transactions
        var filtered = transactions.AsEnumerable();

// Apply date range filter if both from and to dates are selected
        if (fromDate.HasValue)
        {
            filtered = filtered.Where(t => t.Date >= fromDate.Value);
        }
        if (toDate.HasValue)
        {
            filtered = filtered.Where(t => t.Date <= toDate.Value);
        }

// Apply the selected filter type (Top 5, Last 5, All)
        switch (selectedFilter)
        {
            case "Top5":
                filtered = filtered.OrderByDescending(t => t.Date).Take(5);
                break;
            case "Last5":
                filtered = filtered.OrderBy(t => t.Date).Take(5);
                break;
            case "All":
            default:
// No additional filtering for "All"
                break;
        }

// Update the filtered transactions list
        filteredTransactions = filtered.ToList();

// Re-render the component after the filtering is done
        StateHasChanged();
    }
    
    

}



